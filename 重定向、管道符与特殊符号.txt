一、输出输出重定向


				1.标准的输入输出及文件描述符
						设备                   设备文件名                      文件描述符                        类型
						键盘                  /dev/stdin                           0                           标准输入
						显示器                /dev/stdout                          1                           标准输出
						显示器                /dev/stderr                          2                           标准错误输出
						
						
						
						
						
				2.输出重定向
						类型                                  符号                                          作用
					
					标准输出重定向                        命令 >  文件                              以覆盖的方式将命令的正确输出保存在指定的文件中
					                                      命令 >> 文件                              以追加的方式将命令的正确输出保存在指定的文件中 

					————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
					标准错误输出重定向                    错误命令 2>  文件                         以覆盖的方式将命令的错误输出保存在指定的文件中
														  错误命令 2>> 文件                         以追加的方式将命令的错误输出保存在指定的文件中
														  
														  
				3.将正确的输出和错误的输出同时保存在指定的文件中
				
				 
				          命令 >  文件 2>&1        以覆盖的方式将命令的正确输出和错误输出保存在指定的文件中
						  命令 >> 文件 2>&1        以追加的方式将命令的正确输出和错误输出保存在指定的文件中
						  
						  命令 &>  文件            以覆盖的方式将命令的正确输出和错误输出保存在指定的文件中
						  命令 &>> 文件            以追加的方式将命令的正确输出和错误输出保存在指定的文件中
						  
						  命令 >> 文件1 2>>文件    将命令的正确输出追加到文件1中，将命令的错误输出追加到文件2中
				4.输入重定向
						wc      选项               文件名
						选项 ：  -c   统计字节数     -l    统计行数      -w    统计单词数
						  wc    <  test.log
二、设置系统时间
		date -s    设置时间            如：date -s 12:00:00
				   设置日期            如：date -s  2019/08/20
				   时间日期一起调整    如：date 0921170618.50    --------2018年9月21日17时6分50秒
		其他方式：date --set=”20140125 09:17:00”    
		
		
		
		
三、多命令顺序执行与管道符号
		1.多命令顺序执行
				多命令执行符                        格式                                            作用
				   ;                            命令1;命令2                          多个命令顺序执行，命令之间没有任何逻辑关系
				   &&                           命令1&&命令2                         逻辑与，当命令1正确执行，则命令2才会执行，当命令1执行不正确，则命令2不会执行
				   ||                           命令1||命令2                         逻辑或，当命令1执行不正确，则命令2才会执行，当命令1正确执行，则命令2不会执行
				   
				   
				   命令&&echo yes || echo no
				   
				   dd命令及格式
							dd  if=输入文件 of=输出文件 bs=字节数  count=个数
					    选项：
								if=输入文件                         制定源文件或原设备
								of=输出文件                         执行目录文件或目标设备
								bs=字节数                           指定一次输入/输出多少个字节，即把这些字节看作一个数据块
								count=个数                          指定输入/输出多少个数据块
							例如：date;dd if=/dev/zero  of=/root/testfile bs=1K count=100000;date
		2.管道符
				命令1 | 命令2     命令1的正确输出作为命令2的操作对象
				ll -a |grep "Java"
				ll -a |more 
				
			grep 命令
					grep    选项     "搜索内容"   文件名
					选项：-i   忽略大小写
					      -n   输出行号
						  -v   反向查找
						  --color =auto  搜索出关键字用颜色显示
四、通配符
		通配符                                             作用
		  ？                                          匹配一个任意字符
		  *                                           匹配0个或任意多个字符，也就是可以匹配任何内容
		  []                                          匹配中括号中任意一个字符。例如:[abc]代表匹配一个字符，或者是a,或者是b,或者是c
		  [-]                                         匹配中括号中任意一个字符。-代表一个范围。例如：[a-z],代表匹配一个小写字母
		  [^]                                         逻辑非，表示匹配不是中括号内的一个字符。例如：[^0-9]代表匹配一个不是数字的字符
		  
		  
		  
五、Bash 中的其他特殊符号
		符号                                                          作用
		 ''                                                   单引号，在单引号中的所有特殊符号，如"$","`"(反引号)都没有特殊含义
		 ""                                                   双引号。在双引号中特殊符号都没有特殊含义，但是，"$","`"和"\"是例外，拥有调用变量的值、引用命令、和转移符的特殊含义
		 ``                                                   反引号。反引号括起来的内容是系统命令，在Bash中会先执行它。和$()作用一样，不过推荐使用$(),因为反引号容易看错
		 $()                                                  和反引号一样，用来引用系统命令
		 #                                                    在shell脚本中，以#开头的代表注释
		 $                                                    用于调用变量的值，如需要调用变量name时，需要用$name的方式来调用变量的值
		 \                                                    转义符。跟在转义符\之后的特殊符号将失去特殊含义，变成普通字符。如\$将输出$符号，而不当作是变量的引用
		 echo '$(date)'       echo "$(date)"