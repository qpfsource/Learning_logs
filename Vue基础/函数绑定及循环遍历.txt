一、函数绑定(事件监听)
	指令:V-on ,在vue中我们可以通过V-on 指令绑定对应的函数执行对应的操作，如:V-on:click,语法糖格式:@click
	V-on参数:使用V-on绑定对应的函数时，如果该函数无参数，则方法名称后面的()可以省略，但是，如果方法中本身就有一个参数，那么
	默认会将原生事件event参数传递进去。
	如果需要同时传入某个参数，同时需要event时，可以通过$event传入事件
	V-on修饰符:
	.stop----调用event.stopPropagation()，方式事件冒泡的发生
	.prevent---调用event.preventDefault()，阻止默认事件
	.{keyCode|keyAlias}--只当事件是从特定的键出发时才进行回调
	.native---监听组件根元素的默认事件
	.once---只触发一次回调
	
二、条件判断(if、else)
	相关指令:
		v-if:和if用法类似，后面的条件为false时，对应的元素及其子元素不会被渲染，也就是不会有对应的标签出现在DOM中
		v-else:和else用法类似
		v-else-if：和else if用法类似
		
三、v-show 指令
	作用:判断相关内容是否在页面上显示，但是，v-show控制元素是否显示时仅仅控制的是对应的display属性
	选择方式:元素内容需要频繁的切换和隐藏时，需要使用v-show,当只有一次切换时，使用v-if即可
	
	
四、v-for 遍历
	1.遍历数组
	作用:使用v-for指令进行数组的循环遍历
			<div id="app">
				<ul>
					<li v-for="i in names">{{i}}</li>
				</ul>
			</div>
	获取下标:
			<ul>
				<li v-for="(item,index) in names"
				
	2.遍历对象
		遍历对象时，只获取一个值时，获取到的数据为value,可以使用value,key in info的方式从对象中获取数据和key值，同时，还可以在
		对象中获取对应的index属性值（value,key,index） in info 
	注意:官方推荐在使用v-for时，在对应的元素或组件上加上key属性，方便后期的操作与内容的复用
	
	
五、数组中的响应式方法
	1.push()方法，向数组的最后位置添加指定的元素(每次可直接添加多个元素)
	2.pop()方法，删除数组中的最后一个元素
	3.shiift()方法，从数组中的第一个元素开始删除
	4.unshift()方法，在数组最前面添加元素内容(每次可直接添加多个元素)
	5.splice()方法
			1.参数（start,rule）
			删除元素(第二个参数传入需要删除几个元素)，如果改参数为空则会将对应缩影位置后面的所有元素删除
			2.参数（start,rule,insert1,insert2....）
			插入元素(第二个参数传入0,代表删除0个元素)，后面继续填写需要插入的相关元素即可
			3.参数（start,rule,change1,change2......）
			替换元素，(第二个参数传入需要替换的元素个数),后面是用来替换的元素，如果替换的元素不写，则默认执行的是对应的删除操作
	6.sort()方法,进行数组元素的排序
	7.reverse()方法，进行数组元素的反转
	改变数组的内容方式:使用Vue中的set方法
	set(要修改的参数，索引值，修改后的值)，示例:Vue.set(this.letters,0,"张三"),修改数组letters中的元素索引为0的元素的值为张三
	
	函数的可变参数案例：
			function sum(...num){
				console.log(num);
				//num为数组类型
			}
			调用sum函数时，可以传入任意数量的参数，如:sum(1,2,3)、sum(2,3,4,5,6,7).........
	数字保留两位小数的方法:number.toFixed(2)
	Vue中的过滤器:在Vue中可以使用Filters作为过滤器，一般为一个函数(需要过滤的内容一般当做函数的参数传入到函数中进行处理)
	语法格式:item.price|showPrice,使用过滤内容|过滤器的方式完成对应的操作
	
	
六、在ES6中的相关高阶函数
	循环遍历:1.for (let i in 数组)，其中i代表循环时的索引值    2.for(let item of this.books),其中item代表数组中的某一项数据
	1.filter:函数过滤器，可以传入一个回调函数，每次循环遍历时都会进行回调，该函数的返回结果必须为一个布尔值，当返回值为true时，
	  在函数的内部会将对应的内容加入到新的数组当中，反之亦然。
	案例:let newnubers= numbers.filter(function{return n<100}),将属于组中的小于100的数组取出构成新的数组
	2.map函数:循环遍历数组中的元素，每次遍历时会进行函数的回调
	案例：数组.map(function(n){return n*2}),将数组中的每个元素乘2，构成新的数组内容
	3.reduce函数:将数组中的所有内容进行汇总，如相加、想乘等基本操作。需要传入两个参数
	案例:newnumbereds.reduce(函数(privious,n)[]，0[初始化值])
		数组名称.reduce(function(previous,n){return previous+n},0)，循环遍历数组将数组中的元素值进行相加求和。