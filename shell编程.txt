一、基础正则表达式
		正则表达式与通配符
			1.正则表达式用来在文件中匹配符合条件的字符串，正则是包含匹配。grep、awk、sed等命令可以支持正则表达式。
			                      		基础正则表达式
				元字符                                                         作用
			————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
				 *                                               前一个字符匹配0次或任意多次  例如：a*  匹配a出现一次或任意多次
		    ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
				 .                                               匹配除了换行符之外的任意字符
			———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— 
				 ^                                               匹配行首。例如:^hello会匹配以hello开头的行
			————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
				 $                                               匹配行尾。例如:$hello会匹配以hello结尾的行
			————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
				 []                                              匹配中括号中指定的任意一个字符，只匹配一个字符。例如：[aoeiu]匹配任意一个元婴字母、[0-9]匹配任意一个数字、
				                                                 [a-z][0-9]匹配一个小写字母和一位数字构成的两位字符
			————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
			    [^]                                              匹配除中括号字符以外的任意一个字符。如：[^0-9]匹配任意一个非数字字符、[^a-z]匹配任意一个非小写字母
			————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
			    \                                                转义符。用于将特殊符号的含义取消
			————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
			    \{n\}                                            表示其前面的字符恰好出现n次。例如：[0-9]\{4\}匹配四位数字，[1][3-8][0-9]\{9\}匹配手机号码
			————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
			    \{n,\}                                           表示前面的字符出现不小于n次。例如：[0-9]\{2,\}表示两位及以上的数字
			————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
			    \{n,m\}                                          表示其前面的字符至少出现n次，最多出现m次。例如:[a-z]\{6,8\},表示匹配6到8位的小写字母
			————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
			
			2.通配符用来匹配符合条件的文件名，通配符是完全匹配。ls、find、cp这些命令不支持正则表达式，所以只能使用shell自己的通配符来进行匹配了。
			



二、字符截取命令
			1.cut字段提取命令
				cut  选项   文件名
				选项：-f列号：  提取第几列
				      -d分隔符：按照指定的分隔符分割列
					  cut -f 1  student.txt             cut -d ":" -f 1,3 /etc/passwd   -d：指定分隔符   -f:指定提取的行  
					  取反删除普通用户：cat /etc/passwd |grep /bin/bash |grep -v root |cut -d ":" -f 1
			2.printf命令
				printf    '输出类型的输出格式'   输出内容
				输出类型：
						%ns:                  输出字符串。n是数字指代输出几个字符
						%ni:				  输出整数。n是数字指代输出几个数字
						%m.nf:                位数和小数位数。如%8.2f代表共输出8位数，其中2位是小数，6位是整数
				输出格式：
						\a:                   输出警告音
						\b:					  输出退格键，也就是Backspace键
						\f:					  清除屏幕
						\n:					  换行
						\r:					  回车，也就是Enter键
						\t:					  水平输出退格键，也就是tab键
						\v:					  垂直输出tab键，也就是tab键
						 命令格式如：printf '%s %s %s\n' 1 2 3 4 5 6
									 printf '%s\t  %s\t %s\t %s\t %s\t\n'  $(cat student.txt)
			3.awk命令
						awk '条件1{动作1}条件2{动作2}...' 文件名
						条件（pattern)
						一般使用关系表达式作为条件
						  X>10        判断变量x是否大于10
						  x>=10       判断变量x是否大于等于10
						  x<=10       判断变量x是否小于等于10
						动作（Action）
							格式化输出
							流程控制语句
							awk '{printf $2 "\t"$3\n}' student.txt
							df -h |awk '{print $1 "\t" $5"\t"$6}'
							df -h |grep mapper|awk '{print $5}'|cut -d "%" -f 1     注意：提取根分区的占用率数字65
							cat /etc/passwd |grep "/bin/bash"|awk 'BEGIN{FS=":"}{printf$1"\t"$3"\n"}'   提取系统中可以登录的用户及其UID
							输出结果为：
										
											Name         gender
											Liming          M
											Shenchao        M
											Qipengfei       M
							BEGIN{print"start"}                END{print"over"}

			4.sed命令
					sed是一种几乎包括在所有UNIX平台（包括Linux）的轻量级流编辑器。sed主要是用来将数据进行选取、替换、删除、新增的命令
					sed    选项        '[动作]'    文件名
					选项：
							-n: 一般sed命令会把所有数据都输出到屏幕，如果加入此选择，则只会把晋国sed命令处理的行输出到屏幕。
							-e:允许对输入的数据应用多条sed名利个编辑
							-i:用sed修改结果直接修改读取数据的文件，而不是由屏幕输出
					动作：
							a\:追加，在当前行后添加一行或多行。天机多行时，出最后一行外，每行末尾都需要用"\"代表数据未完结
							c\:行代替，用c后面的字符串替换原市数据行，替换多行时，除最后一行外，每行末尾需要用"\"代表数据未完结
							i\:插入，在当前行前插入一行或多行。插入多行时，除最后一行外，其他的每行行尾都需要用"\"代表数据未完结
							d\:删除，删除指定的行
							p\:打印，输出指定的行
							s\:字串替代，用一个字符串替换另一个字符串。格式为：行范围s/旧字串/新字串/g(与vim中的替换格式类似)
						实例： sed -n '2p' student.txt






三、字符处理命令






四、条件判断






五、流程控制